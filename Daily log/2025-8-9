1. ターミナル（Terminal）
見た目の「窓」や「アプリ」のこと

コマンドを入力できる黒い（または白い）画面。

自分がパソコンに命令を打ち込む入り口。

例：macOSの「ターミナル.app」、Windowsの「コマンドプロンプト」や「PowerShell」

📌 例えるなら…
「電話機本体」。ここから相手（OS）に話しかけられるけど、どう話すかは別のものが決める。

2. シェル（Shell）
命令を解釈してOSに伝えるソフト

ターミナルの中で動いているプログラムのこと。

入力したコマンドを理解し、結果を返す役割。

種類が色々ある（bash、zsh、fishなど）。

📌 例えるなら…
「通訳さん」。あなたの言葉（コマンド）をOSがわかる言葉に翻訳してくれる。

3. バッシュ（Bash）
シェルの一種（正式には「Bourne Again SHell」）。

多くのLinuxやmacOSで標準的に使われてきたシェル。

プログラムや自動化スクリプトも書ける。

📌 例えるなら…
「通訳さんの中でも一番ポピュラーな人」。
世界中のエンジニアがこの人を使ってきた。

-------------------------

## ls - 意味：List（リスト）の略

「今いる場所の中身（ファイルやフォルダの名前）を見せて！」って命令

## pwd - 意味：Print Working Directory（今の作業場所を表示）

「今どこにいるの？」って聞く命令

## cd - change directory - cdに行きたい場所を指定するだけで連れてってくれる

## cd .. → 1つ上の階に戻る（例：自分の部屋 → 2階の廊下）

## cd ~ → 家の玄関（ホームディレクトリ）に一気に戻る

## cd - → 前いた部屋に戻る（「あ、やっぱさっきの部屋に行く！」って感じ）

ctl kで今まで書いたものを消す (Clearと打っても消える)

一戸前に戻りたいときは、cd..で戻れる

## 絶対パス（Absolute Path）
スタート地点がパソコンの最上階（ルート）から

どこから実行しても同じ場所にたどり着ける

例（Mac/Linux）：

bash

/Users/you/Documents/file.txt
例（Windows）：

makefile

C:\Users\you\Documents\file.txt
特徴：

「住所を全部書く」イメージ

迷わないけど長くなる

##相対パス（Relative Path）
今いる場所（カレントディレクトリ）からの道順

実行する場所によって結果が変わる

例：

bash

file.txt          ← 同じフォルダにある場合
../file.txt       ← 1つ上の階層にある場合
images/photo.jpg  ← 今の場所の中のimagesフォルダ
特徴：

短く書ける

でも、出発地点が変わるとたどり着けない

## mkdir - make directry 空のdirectoryを作ることができる
複数作りたいときはスペースを空ける　mkdr chicken duck

## man - mannualの略
man Ls と書いた場合、Lsの説明が見たいと言っている
1度manに入って、そこから出たい場合、アルファベットのqを押せば戻れる

## touch - toucchに作りたいファイルをわたすとからのファイルを作成
touch shiro.htmlと書くだけ

touchコマンドは、主に新しい空のファイルを作るときや、すでにあるファイルの更新日時を変更するときに使います。

使い方の例
新しいファイルを作る

bash
touch hello.txt
→ カレントディレクトリに「hello.txt」という空のファイルができます。

複数ファイルを同時に作る

bash
touch file1.txt file2.txt file3.txt
→ 一気に3つの空ファイルを作る。

既存ファイルの「更新日時」を今の時間に変える

bash
touch existing_file.txt
→ ファイルの中身は変わらないけど、「最後に触った時間」を今にする。

## rm - remove 消すとき（これを押すと本当に全部消えてしまうので取扱注意）
ファイルの中身を消すとき、～だと消せるがなにか入っていると消えない
## rm - rf - これだと全部消せる

rm	ファイルやフォルダを消す
-r	フォルダの中身も全部消す（再帰的に）
-f	「強制的に」消す。警告なしで実行